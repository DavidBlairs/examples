---
title: "ADTTE"
order: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# Introduction

This article provides a step-by-step explanation for creating an ADaM `ADTTE` (Time-to-Event) dataset with common oncology endpoint parameters using the `{admiral}`, `{admiralonco}`, `{metacore}`, `{metatools}`, and `{xportr}` packages. ADTTE datasets often involve calculating time-to-event variables for endpoints such as Overall Survival (OS) and Progression-Free Survival (PFS).

For the purpose of this example, we will use the `adsl` and `adrs_onco` datasets.

# Load Required Packages

First, we will load the necessary packages:

```{r message=FALSE, warning=FALSE}
library(admiral)
library(admiralonco)
library(dplyr)
library(lubridate)
library(metacore)
library(metatools)
library(xportr)
library(pharmaverseadam)
```

# Load Specifications and Source Data

We will load our specification file into a `{metacore}` object to trace the dataset variables and attributes. Then, we will read the source data (`adsl` and `adrs_onco`).

```{r read-specs}
#| warning: false

# Load metacore specifications
metacore <- spec_to_metacore("../metadata/onco_spec.xlsx") %>%
  select_dataset("ADTTE")

# Load source datasets
data("adsl")
data("adrs_onco")

adrs <- adrs_onco %>%
  convert_blanks_to_na()
```

```{r, echo=FALSE}
# Show the first few rows of ADSL and ADRS
head(adsl, n=10)
head(adrs, n=10)
```

# Define Event and Censoring Sources

We define event and censoring sources using the `admiral::event_source` and `admiral::censor_source` functions. This forms the basis for calculating time-to-event endpoints.

```{r}
# Define event and censoring sources
death_event <- event_source(
  dataset_name = "adsl",
  date = DTHDT,
  set_values_to = exprs(
    EVNTDESC = "Death",
    SRCDOM = "ADSL",
    SRCVAR = "DTHDT"
  )
)

pd_event <- event_source(
  dataset_name = "adrs",
  filter = PARAMCD == "PD" & ANL01FL == "Y",
  date = ADT,
  set_values_to = exprs(
    EVNTDESC = "Progressive Disease",
    SRCDOM = "ADRS",
    SRCVAR = "ADT"
  )
)

lastalive_censor <- censor_source(
  dataset_name = "adsl",
  date = LSTALVDT,
  set_values_to = exprs(
    EVNTDESC = "Last Known Alive",
    CNSDTDSC = "Last Known Alive Date",
    SRCDOM = "ADSL",
    SRCVAR = "LSTALVDT"
  )
)

rand_censor <- censor_source(
  dataset_name = "adsl",
  date = RANDDT,
  set_values_to = exprs(
    EVNTDESC = "Randomization Date",
    CNSDTDSC = "Randomization Date",
    SRCDOM = "ADSL",
    SRCVAR = "RANDDT"
  )
)
```

# Derive Time-to-Event Parameters

The `admiral::derive_param_tte` function is used to derive parameters such as OS (Overall Survival) and PFS (Progression-Free Survival).

```{r}
# Derive Overall Survival (OS)
adtte <- derive_param_tte(
  dataset_adsl = adsl,
  start_date = RANDDT,
  event_conditions = list(death_event),
  censor_conditions = list(lastalive_censor, rand_censor),
  source_datasets = list(adsl = adsl, adrs = adrs),
  set_values_to = exprs(PARAMCD = "OS", PARAM = "Overall Survival")
)

# Derive Progression-Free Survival (PFS)
adtte <- adtte %>%
  derive_param_tte(
    dataset_adsl = adsl,
    start_date = RANDDT,
    event_conditions = list(pd_event, death_event),
    censor_conditions = list(lastalive_censor, rand_censor),
    source_datasets = list(adsl = adsl, adrs = adrs),
    set_values_to = exprs(PARAMCD = "PFS", PARAM = "Progression-Free Survival")
  )
```

```{r, echo=FALSE}
# Display first few rows of ADTTE
head(adtte, n=10)
```

# Derive Analysis Value (`AVAL`)

The analysis value (`AVAL`) can be derived by calling the `admiral::derive_vars_duration` function.

```{r}
# Derive analysis value
adtte <- adtte %>%
  derive_vars_duration(
    new_var = AVAL,
    start_date = STARTDT,
    end_date = ADT
  )
```

```{r, echo=FALSE}
# Display first few rows with AVAL
head(adtte, n=10)
```

# Derive Analysis Sequence Number (`ASEQ`)

We derive the sequence number for each record to uniquely identify them using the `admiral::derive_var_obs_number` function.

```{r}
# Derive analysis sequence number
adtte <- adtte %>%
  derive_var_obs_number(
    by_vars = exprs(STUDYID, USUBJID),
    order = exprs(PARAMCD),
    check_type = "error"
  )
```

```{r, echo=FALSE}
# Display first few rows with ASEQ
head(adtte, n=10)
```

# Add ADSL Variables

Additional variables from the `ADSL` dataset are merged into the `ADTTE` dataset using the `admiral::derive_vars_merged` function to enrich it.

```{r}
# Add ADSL variables
adtte <- adtte %>%
  derive_vars_merged(
    dataset_add = adsl,
    by_vars = exprs(STUDYID, USUBJID)
  )
```

```{r, echo=FALSE}
# Display first few rows with merged ADSL variables
head(adtte, n=10)
```

# Apply Metadata and eSub Checks

We use `{metatools}` and `{xportr}` to perform checks, apply metadata such as types, lengths, labels, and write the dataset to an XPT file.

```{r, eval=FALSE}
# Apply metadata and perform checks
adtte <- adtte %>%
  check_variables(metacore) %>%
  check_ct_data(metacore) %>%
  order_cols(metacore) %>%
  sort_by_key(metacore) %>%
  xportr_type(metacore, domain = "ADTTE") %>%
  xportr_length(metacore) %>%
  xportr_label(metacore) %>%
  xportr_df_label(metacore)
  
# Write dataset to XPT file (optional)
dir <- tempdir()
xportr_write(adtte, file.path(dir, "adtte.xpt"))
```

```{r, echo=FALSE}
# Display final ADTTE dataset
head(adtte, n=10)
```